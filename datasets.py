import os
import pandas as pd
import time

from .building import Building
from .constants import *


def funny_apts_str(units):
    s = ""
    for unit in units:
        s += f"üö™ {unit['unit_number']}, "
    return s[:-2] + "."


class Datasets:
    def __init__(self, building: Building):
        self.building = building

    def _merge_temps(self, unit_refs, time_from: str, time_to: str):

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç –∏ –∫ –Ω–µ–º—É –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–ª–µ–ø–ª—è—Ç—å –¥—Ä—É–≥–∏–µ
        first_unit = unit_refs[0]
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞–º, –ø–æ—Ç–æ–º—É —á—Ç–æ –±–∏–≥ –¥–∞—Ç–∞ –≤—Å–µ-—Ç–∞–∫–∏
        time_from = pd.Timestamp(time_from, tz="America/New_York")
        time_to = pd.Timestamp(time_to, tz="America/New_York")
        time_filter = lambda index: (time_from <= index) & (index <= time_to)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ –ø–æ–ª–µ, –º–µ—Ä–¥–∂–∏–º —Å—Ä–µ–¥–Ω–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏.
        filepath = BIN_DIR / self.building.name / "%s.csv.pkl.gz"
        column_name = "unit_%s"
        ds = pd.read_pickle(str(filepath) % first_unit["name_opc"])
        ds.rename(
            columns={"value": column_name % first_unit["hmi_unit_number"]}, inplace=True
        )
        ds.set_index("time", inplace=True)
        ds = ds[time_filter(ds.index)]
        ds = ds.groupby(ds.index).mean()

        for i, ur in enumerate(unit_refs[1:]):
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ –ø–æ–ª–µ, –º–µ—Ä–¥–∂–∏–º —Å—Ä–µ–¥–Ω–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏.
            try:
                iter_ds = pd.read_pickle(str(filepath) % ur["name_opc"])
            except FileNotFoundError:
                print(f"üôÑ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - {ur['name_opc']}.")
                continue
            iter_ds.rename(
                columns={"value": column_name % ur["hmi_unit_number"]}, inplace=True
            )
            iter_ds.set_index("time", inplace=True)
            iter_ds = iter_ds[time_filter(iter_ds.index)]
            iter_ds = iter_ds.groupby(iter_ds.index).mean()

            # –°–∫–ª–µ–∏–≤–∞–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º –¥–∞—Ç–∞—Å–µ—Ç–æ–º.
            ds = pd.merge(ds, iter_ds, how="outer", left_index=True, right_index=True)
            progress = (i + 1) * 100 / len(unit_refs[1:])
            print(f"Progress: {progress:.2f}% ", end="\x1b[1K\r")

        # –£ –¥–∞—Ç–∞—Å–µ—Ç–∞ –æ—Å—Ç–∞—é—Ç—Å—è –ø—É—Å—Ç—ã–µ –ø–æ–ª—è –æ—Ç OUTER –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è, –∑–∞–ø–æ–ª–Ω–∏–º –∏—Ö.
        ds.fillna(method="ffill", inplace=True)
        ds.fillna(method="bfill", inplace=True)
        return ds

    def create_temperature_datasets_by_zones(self, time_from: str, time_to: str):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ building, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ
        –∑–æ–Ω–∞–º."""
        zones: set = self.building.zones()
        output_dir = PREPARED_DIR / self.building.name / f"{time_from}_{time_to}"
        os.makedirs(output_dir, exist_ok=True)

        print("‚öôÔ∏è –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ —Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏.")
        print(
            f"–ó–¥–∞–Ω–∏–µ –ø–æ–¥–µ–ª–µ–Ω–æ –Ω–∞ {len(zones)} –∑–æ–Ω(—ã). –í—ã–¥–µ–ª—è—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –∑–æ–Ω—ã {zones}"
        )
        print(f"–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ —Å—Ç–æ–ª—å–∫–æ –∂–µ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. {output_dir}")

        for zone in zones:
            dataset_name = "zone_%s.pkl.gz" % zone
            units = self.building.units(zone_n=zone)
            print(f"üìÉ –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç {dataset_name}", end="\x1b[1K\r")
            start_time = time.monotonic()
            ds = self._merge_temps(units, time_from, time_to)
            ds.to_pickle(output_dir / dataset_name)
            print(
                f"üïë –°–æ–∑–¥–∞–ª–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ {dataset_name} –∑–∞ {time.monotonic()-start_time:.2f} —Å–µ–∫"
            )
        print("üéâ –í—Å–µ, –∑–∞–≤–µ—Ä—à–∏–ª–∏.")
